generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  isAdmin   Boolean  @default(false) // ‚úÖ Th√™m ƒë·ªÉ ph√¢n quy·ªÅn
  createdAt DateTime @default(now())

  orders Order[] // ƒë·ªëi x·ª©ng v·ªõi Order.user
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  products Product[] // 1 danh m·ª•c c√≥ nhi·ªÅu s·∫£n ph·∫©m
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?
  size        String?
  quantity    Int
  price       Float
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItems OrderItem[] // üëà c·∫ßn field n√†y ƒë·ªÉ ƒë·ªëi x·ª©ng v·ªõi OrderItem.product
}

model Order {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation(fields: [userId], references: [id]) // ƒë·ªëi x·ª©ng v·ªõi User.orders
  status     String   @default("PENDING")
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customerName String
  phone        String
  address      String
  note         String?

  orderItems OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id]) // ƒë·ªëi x·ª©ng v·ªõi Order.orderItems
  productId Int
  product   Product @relation(fields: [productId], references: [id]) // ƒë·ªëi x·ª©ng v·ªõi Product.orderItems
  quantity  Int
  price     Float
}
