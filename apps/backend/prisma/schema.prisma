generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER) 
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)  
  orders Order[]
}

enum Role {
  USER
  STAFF
  ADMIN
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  products Product[] // 1 danh mục có nhiều sản phẩm
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  image       String?          // ảnh mặc định của sản phẩm
  categoryId  Int
  category    Category         @relation(fields: [categoryId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  variants    ProductVariant[] // Quan hệ 1-nhiều với biến thể
  bestSeller  BestSeller?
}

model ProductVariant {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])

  size      String?
  color     String?
  price     Float
  quantity  Int
  image     String?   // ảnh riêng của biến thể nếu cần

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
model Order {
  id           Int         @id @default(autoincrement())
  userId       Int
  user         User        @relation(fields: [userId], references: [id]) 
  status       OrderStatus @default(PENDING)
  totalPrice   Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  customerName String
  phone        String
  address      String
  note         String?

  orderItems   OrderItem[]

  voucherId Int?
  voucher   Voucher? @relation("OrderVoucher", fields: [voucherId], references: [id])
}

model OrderItem {
  id             Int            @id @default(autoincrement())
  orderId        Int
  order          Order          @relation(fields: [orderId], references: [id]) 

  productVariantId Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])

  quantity  Int
  price     Float   // giá tại thời điểm mua (để không bị thay đổi khi variant update)
}

model BestSeller {
  id        Int      @id @default(autoincrement())
  productId Int      @unique
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}

model Voucher {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  discount  Int // số tiền giảm trực tiếp
  quantity  Int // số lượng còn lại
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Quan hệ ngược
  orders Order[] @relation("OrderVoucher")
}
